sigmoid	ANN.cpp	/^double sigmoid(double x1);$/;"	p	file:
dsigmoid	ANN.cpp	/^double dsigmoid(double x1);$/;"	p	file:
logit	ANN.cpp	/^double logit(double x1);$/;"	p	file:
sigmoid	ANN.cpp	/^double sigmoid(double x1) {$/;"	f
dsigmoid	ANN.cpp	/^double dsigmoid(double x1) {$/;"	f
logit	ANN.cpp	/^double logit(double x1) {$/;"	f
matrix	ANN.cpp	/^class matrix {$/;"	c	file:
matrix	ANN.cpp	/^    matrix();$/;"	p	class:matrix	file:
matrix	ANN.cpp	/^    matrix(const matrix& m1);$/;"	p	class:matrix	file:
operator =	ANN.cpp	/^    matrix& operator =(const matrix& m1);$/;"	p	class:matrix	file:
~matrix	ANN.cpp	/^    ~matrix();$/;"	p	class:matrix	file:
matrix	ANN.cpp	/^    matrix(int row, int column);$/;"	p	class:matrix	file:
matrix	ANN.cpp	/^    matrix(int row, int column, double value);$/;"	p	class:matrix	file:
matrix	ANN.cpp	/^    matrix(int row, int column, double* value);$/;"	p	class:matrix	file:
setmatrix	ANN.cpp	/^    int setmatrix(int row, int column, double* a);$/;"	p	class:matrix	file:
setmatrix	ANN.cpp	/^    int setmatrix(double* a);$/;"	p	class:matrix	file:
get_row	ANN.cpp	/^    int get_row();$/;"	p	class:matrix	file:
get_column	ANN.cpp	/^    int get_column();$/;"	p	class:matrix	file:
get_element	ANN.cpp	/^    double get_element(int row, int column);$/;"	p	class:matrix	file:
get_row_as_matrix	ANN.cpp	/^    matrix get_row_as_matrix(int row);$/;"	p	class:matrix	file:
print	ANN.cpp	/^    int print();$/;"	p	class:matrix	file:
save_to_file	ANN.cpp	/^    int save_to_file(string filename);$/;"	p	class:matrix	file:
load_from_file	ANN.cpp	/^    int load_from_file(string filename);$/;"	p	class:matrix	file:
length	ANN.cpp	/^    double length();$/;"	p	class:matrix	file:
transfer	ANN.cpp	/^    matrix transfer(double (*function)(double));$/;"	p	class:matrix	file:
transpose	ANN.cpp	/^    matrix transpose();$/;"	p	class:matrix	file:
multi	ANN.cpp	/^    friend matrix multi(const matrix& m1, const matrix& m2);$/;"	p	class:matrix	file:
cost_OBP	ANN.cpp	/^    friend matrix cost_OBP(const matrix& m1, const matrix& m2); \/\/OBP = optical backpropagation$/;"	p	class:matrix	file:
fliter_max_value	ANN.cpp	/^    friend matrix fliter_max_value(const matrix& m1, double x1);$/;"	p	class:matrix	file:
operator +	ANN.cpp	/^    friend matrix operator +(const matrix& m1, const matrix& m2);$/;"	p	class:matrix	file:
operator -	ANN.cpp	/^    friend matrix operator -(const matrix& m1, const matrix& m2);$/;"	p	class:matrix	file:
operator *	ANN.cpp	/^    friend matrix operator *(const matrix& m1, const matrix& m2);$/;"	p	class:matrix	file:
operator *	ANN.cpp	/^    friend matrix operator *(const double& x1, const matrix& m1);$/;"	p	class:matrix	file:
operator *	ANN.cpp	/^    friend matrix operator *(const matrix& m1, const double& x1);$/;"	p	class:matrix	file:
operator /	ANN.cpp	/^    friend matrix operator \/(const double& x1, const matrix& m1);$/;"	p	class:matrix	file:
operator /	ANN.cpp	/^    friend matrix operator \/(const matrix& m1, const double& x1);$/;"	p	class:matrix	file:
operator -	ANN.cpp	/^    friend matrix operator -(const matrix& m1);$/;"	p	class:matrix	file:
operator ==	ANN.cpp	/^    friend bool operator ==(const matrix& m1, const matrix& m2);$/;"	p	class:matrix	file:
operator <<	ANN.cpp	/^    friend ostream& operator<<(ostream &out, const matrix& m1);$/;"	p	class:matrix	file:
operator >>	ANN.cpp	/^    friend istream& operator>>(istream &in, matrix& m1);$/;"	p	class:matrix	file:
row	ANN.cpp	/^    int row, column;$/;"	m	class:matrix	file:
column	ANN.cpp	/^    int row, column;$/;"	m	class:matrix	file:
a	ANN.cpp	/^    double *a;$/;"	m	class:matrix	file:
matrix	ANN.cpp	/^matrix::matrix() {$/;"	f	class:matrix
operator =	ANN.cpp	/^matrix& matrix::operator =(const matrix& m1) {$/;"	f	class:matrix
matrix	ANN.cpp	/^matrix::matrix(const matrix& m1) {$/;"	f	class:matrix
~matrix	ANN.cpp	/^matrix::~matrix() {$/;"	f	class:matrix
matrix	ANN.cpp	/^matrix::matrix(int row, int column) {$/;"	f	class:matrix
matrix	ANN.cpp	/^matrix::matrix(int row, int column, double value) {$/;"	f	class:matrix
matrix	ANN.cpp	/^matrix::matrix(int row, int column, double* value) {$/;"	f	class:matrix
setmatrix	ANN.cpp	/^int matrix::setmatrix(int row, int column, double* a) {$/;"	f	class:matrix
setmatrix	ANN.cpp	/^int matrix::setmatrix(double* a) {$/;"	f	class:matrix
get_row	ANN.cpp	/^int matrix::get_row() {$/;"	f	class:matrix
get_column	ANN.cpp	/^int matrix::get_column() {$/;"	f	class:matrix
get_element	ANN.cpp	/^double matrix::get_element(int row, int column) {$/;"	f	class:matrix
get_row_as_matrix	ANN.cpp	/^matrix matrix::get_row_as_matrix(int row) {$/;"	f	class:matrix
print	ANN.cpp	/^int matrix::print() {$/;"	f	class:matrix
save_to_file	ANN.cpp	/^int matrix::save_to_file(string filename) {$/;"	f	class:matrix
load_from_file	ANN.cpp	/^int matrix::load_from_file(string filename) {$/;"	f	class:matrix
length	ANN.cpp	/^double matrix::length() {$/;"	f	class:matrix
transfer	ANN.cpp	/^matrix matrix::transfer(double (*function)(double)) {$/;"	f	class:matrix
transpose	ANN.cpp	/^matrix matrix::transpose(){$/;"	f	class:matrix
multi	ANN.cpp	/^matrix multi(const matrix& m1, const matrix& m2) {$/;"	f
cost_OBP	ANN.cpp	/^matrix cost_OBP(const matrix& m1, const matrix& m2) {$/;"	f
fliter_max_value	ANN.cpp	/^matrix fliter_max_value(const matrix& m1, double x1) {$/;"	f
operator +	ANN.cpp	/^matrix operator +(const matrix& m1, const matrix& m2) {$/;"	f
operator -	ANN.cpp	/^matrix operator -(const matrix& m1, const matrix& m2) {$/;"	f
operator *	ANN.cpp	/^matrix operator *(const matrix& m1, const matrix& m2) {$/;"	f
operator *	ANN.cpp	/^matrix operator *(const double& x1, const matrix& m1) {$/;"	f
operator *	ANN.cpp	/^matrix operator *(const matrix& m1, const double& x1) {$/;"	f
operator /	ANN.cpp	/^matrix operator \/(const double& x1, const matrix& m1) {$/;"	f
operator /	ANN.cpp	/^matrix operator \/(const matrix& m1, const double& x1) {$/;"	f
operator -	ANN.cpp	/^matrix operator -(const matrix& m1) {$/;"	f
operator ==	ANN.cpp	/^bool operator ==(const matrix& m1, const matrix& m2) {$/;"	f
operator <<	ANN.cpp	/^ostream& operator<<(ostream &out, const matrix& m1) {$/;"	f
operator >>	ANN.cpp	/^istream& operator>>(istream &in, matrix& m1) {$/;"	f
ANN	ANN.cpp	/^class ANN {$/;"	c	file:
ANN	ANN.cpp	/^    ANN();$/;"	p	class:ANN	file:
ANN	ANN.cpp	/^    ANN(int layers_size,int *neurons_size);$/;"	p	class:ANN	file:
ANN	ANN.cpp	/^    ANN(int layers_size,int *neurons_size,matrix *weight);$/;"	p	class:ANN	file:
ANN	ANN.cpp	/^    ANN(const ANN& ann1);$/;"	p	class:ANN	file:
operator =	ANN.cpp	/^    ANN& operator =(const ANN& ann1);$/;"	p	class:ANN	file:
operator +	ANN.cpp	/^    friend ANN operator +(const ANN& ann1, const ANN& ann2);$/;"	p	class:ANN	file:
operator -	ANN.cpp	/^    friend ANN operator -(const ANN& ann1, const ANN& ann2);$/;"	p	class:ANN	file:
operator /	ANN.cpp	/^    friend ANN operator \/(const ANN& ann1, double x1);$/;"	p	class:ANN	file:
operator *	ANN.cpp	/^    friend ANN operator *(double x1, const ANN& ann1);$/;"	p	class:ANN	file:
operator *	ANN.cpp	/^    friend ANN operator *(const ANN& ann1, double x1);$/;"	p	class:ANN	file:
operator ==	ANN.cpp	/^    friend bool operator ==(const ANN& ann1, const ANN& ann2);$/;"	p	class:ANN	file:
~ANN	ANN.cpp	/^    ~ANN();$/;"	p	class:ANN	file:
setweight	ANN.cpp	/^    int setweight(matrix *weight);$/;"	p	class:ANN	file:
randomweight	ANN.cpp	/^    int randomweight();$/;"	p	class:ANN	file:
print	ANN.cpp	/^    int print();$/;"	p	class:ANN	file:
print_detail	ANN.cpp	/^    int print_detail();$/;"	p	class:ANN	file:
save_to_file	ANN.cpp	/^    int save_to_file(string filename);$/;"	p	class:ANN	file:
load_from_file	ANN.cpp	/^    int load_from_file(string filename);$/;"	p	class:ANN	file:
train	ANN.cpp	/^    int train(matrix input, matrix output, double speed);$/;"	p	class:ANN	file:
train_OBP	ANN.cpp	/^    int train_OBP(matrix input, matrix output, double speed);$/;"	p	class:ANN	file:
train_method_batch	ANN.cpp	/^    int train_method_batch(matrix input, matrix output, double err, int max_times, double speed, int loop, string ann_name);$/;"	p	class:ANN	file:
train_method_random	ANN.cpp	/^    int train_method_random(matrix input, matrix output, double err, int max_times, double speed, int loop, string ann_name);$/;"	p	class:ANN	file:
feed	ANN.cpp	/^    matrix feed(matrix input);$/;"	p	class:ANN	file:
layers_size	ANN.cpp	/^    int layers_size, *neurons_size;$/;"	m	class:ANN	file:
neurons_size	ANN.cpp	/^    int layers_size, *neurons_size;$/;"	m	class:ANN	file:
weight	ANN.cpp	/^    matrix *weight;$/;"	m	class:ANN	file:
ANN	ANN.cpp	/^ANN::ANN () {$/;"	f	class:ANN
ANN	ANN.cpp	/^ANN::ANN(int layers_size,int *neurons_size) {$/;"	f	class:ANN
ANN	ANN.cpp	/^ANN::ANN(int layers_size,int *neurons_size,matrix *weight) {$/;"	f	class:ANN
ANN	ANN.cpp	/^ANN::ANN(const ANN& ann1) {$/;"	f	class:ANN
operator =	ANN.cpp	/^ANN& ANN::operator =(const ANN& ann1) {$/;"	f	class:ANN
operator +	ANN.cpp	/^ANN operator +(const ANN& ann1,const ANN& ann2) {$/;"	f
operator -	ANN.cpp	/^ANN operator -(const ANN& ann1,const ANN& ann2) {$/;"	f
operator /	ANN.cpp	/^ANN operator \/(const ANN& ann1, double x1) {$/;"	f
operator *	ANN.cpp	/^ANN operator *(double x1,const ANN& ann1) {$/;"	f
operator *	ANN.cpp	/^ANN operator *(const ANN& ann1, double x1) {$/;"	f
operator ==	ANN.cpp	/^bool operator ==(const ANN& ann1, const ANN& ann2) {$/;"	f
~ANN	ANN.cpp	/^ANN::~ANN () {$/;"	f	class:ANN
setweight	ANN.cpp	/^int ANN::setweight(matrix *weight) {$/;"	f	class:ANN
randomweight	ANN.cpp	/^int ANN::randomweight() {$/;"	f	class:ANN
print_detail	ANN.cpp	/^int ANN::print_detail() {$/;"	f	class:ANN
print	ANN.cpp	/^int ANN::print() {$/;"	f	class:ANN
save_to_file	ANN.cpp	/^int ANN::save_to_file(string filename) {$/;"	f	class:ANN
load_from_file	ANN.cpp	/^int ANN::load_from_file(string filename) {$/;"	f	class:ANN
train	ANN.cpp	/^int ANN::train(matrix input, matrix output,double speed) {$/;"	f	class:ANN
train_OBP	ANN.cpp	/^int ANN::train_OBP(matrix input, matrix output,double speed) {$/;"	f	class:ANN
train_method_batch	ANN.cpp	/^int ANN::train_method_batch(matrix input, matrix output, double err, int max_times, double speed, int loop, string ann_name) {$/;"	f	class:ANN
feed	ANN.cpp	/^matrix ANN::feed(matrix input) {$/;"	f	class:ANN
train_method_random	ANN.cpp	/^int ANN::train_method_random(matrix input, matrix output, double err, int max_times, double speed, int loop, string ann_name) {$/;"	f	class:ANN
ANN_manager	ANN.cpp	/^class ANN_manager{$/;"	c	file:
launch	ANN.cpp	/^    int launch();$/;"	p	class:ANN_manager	file:
manage_ANN	ANN.cpp	/^    int manage_ANN(ANN& myann, string ann_name);$/;"	p	class:ANN_manager	file:
start_project	ANN.cpp	/^    int start_project();$/;"	p	class:ANN_manager	file:
launch	ANN.cpp	/^int ANN_manager::launch () {$/;"	f	class:ANN_manager
manage_ANN	ANN.cpp	/^int ANN_manager::manage_ANN (ANN& myann, string ann_name) {$/;"	f	class:ANN_manager
main	ANN.cpp	/^int main() {$/;"	f
